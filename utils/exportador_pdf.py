"""exportador_pdf.py - Sistema de exporta√ß√£o PDF premium com identidade visual Amaro"""

from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm
from reportlab.lib.colors import HexColor, white, black
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.platypus.flowables import HRFlowable
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from pathlib import Path
from datetime import datetime
import io

# Cores Amaro Aviation
AMARO_PRIMARY = HexColor('#8c1d40')
AMARO_SECONDARY = HexColor('#a02050')
AMARO_DARK = HexColor('#2C3E50')
AMARO_LIGHT = HexColor('#F8F9FA')

def criar_estilos():
    """Cria estilos personalizados para o PDF"""
    styles = getSampleStyleSheet()
    
    # T√≠tulo principal
    styles.add(ParagraphStyle(
        name='TituloAmaro',
        parent=styles['Title'],
        fontSize=24,
        textColor=AMARO_PRIMARY,
        spaceAfter=20,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    ))
    
    # Subt√≠tulo
    styles.add(ParagraphStyle(
        name='SubtituloAmaro',
        parent=styles['Heading1'],
        fontSize=16,
        textColor=AMARO_DARK,
        spaceAfter=12,
        spaceBefore=20,
        fontName='Helvetica-Bold'
    ))
    
    # Texto destacado
    styles.add(ParagraphStyle(
        name='DestaqueAmaro',
        parent=styles['Normal'],
        fontSize=12,
        textColor=AMARO_PRIMARY,
        fontName='Helvetica-Bold',
        spaceAfter=6
    ))
    
    # Texto normal
    styles.add(ParagraphStyle(
        name='NormalAmaro',
        parent=styles['Normal'],
        fontSize=11,
        textColor=AMARO_DARK,
        spaceAfter=6,
        fontName='Helvetica'
    ))
    
    # Footer
    styles.add(ParagraphStyle(
        name='FooterAmaro',
        parent=styles['Normal'],
        fontSize=9,
        textColor=AMARO_DARK,
        alignment=TA_CENTER,
        fontName='Helvetica'
    ))
    
    return styles

def criar_cabecalho():
    """Cria o cabe√ßalho premium do documento"""
    elementos = []
    
    # Verificar se existe logo
    logo_path = Path("assets/logo_amaro.png")
    if logo_path.exists():
        try:
            logo = Image(str(logo_path), width=60*mm, height=20*mm)
            elementos.append(logo)
            elementos.append(Spacer(1, 10*mm))
        except:
            # Se n√£o conseguir carregar a logo, usar texto
            pass
    
    # T√≠tulo da empresa
    styles = criar_estilos()
    titulo_empresa = Paragraph("‚úàÔ∏è AMARO AVIATION", styles['TituloAmaro'])
    elementos.append(titulo_empresa)
    
    subtitulo = Paragraph("RELAT√ìRIO DE AN√ÅLISE DE CUSTOS", styles['SubtituloAmaro'])
    elementos.append(subtitulo)
    
    # Linha decorativa
    linha = HRFlowable(width="100%", thickness=2, color=AMARO_PRIMARY)
    elementos.append(linha)
    elementos.append(Spacer(1, 10*mm))
    
    return elementos

def criar_secao_informacoes(dados):
    """Cria se√ß√£o com informa√ß√µes gerais do relat√≥rio"""
    elementos = []
    styles = criar_estilos()
    
    elementos.append(Paragraph("INFORMA√á√ïES GERAIS", styles['SubtituloAmaro']))
    
    # Dados da an√°lise
    info_data = [
        ['Data do Relat√≥rio:', datetime.now().strftime('%d/%m/%Y %H:%M')],
        ['Tipo de An√°lise:', dados.get('An√°lise', 'N√£o especificado')],
        ['Modelo da Aeronave:', dados.get('Modelo', 'N√£o especificado')],
        ['Rota:', dados.get('Rota', 'N√£o especificado')],
        ['Dura√ß√£o:', dados.get('Dura√ß√£o', 'N√£o especificado')]
    ]
    
    tabela_info = Table(info_data, colWidths=[45*mm, 80*mm])
    tabela_info.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('TEXTCOLOR', (0, 0), (0, -1), AMARO_PRIMARY),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ('TOPPADDING', (0, 0), (-1, -1), 6),
    ]))
    
    elementos.append(tabela_info)
    elementos.append(Spacer(1, 8*mm))
    
    return elementos

def criar_secao_custos(dados):
    """Cria se√ß√£o detalhada de custos"""
    elementos = []
    styles = criar_estilos()
    
    elementos.append(Paragraph("BREAKDOWN DE CUSTOS", styles['SubtituloAmaro']))
    
    # Dados dos custos
    custos_data = [
        ['COMPONENTE', 'VALOR (R$)', 'DESCRI√á√ÉO'],
    ]
    
    # Adicionar componentes de custo
    componentes = [
        ('Combust√≠vel', 'Combust√≠vel'),
        ('Piloto', 'Piloto'),
        ('Manuten√ß√£o', 'Manuten√ß√£o'),
        ('Deprecia√ß√£o', 'Deprecia√ß√£o')
    ]
    
    for nome, chave in componentes:
        if chave in dados:
            valor = dados[chave]
            if isinstance(valor, (int, float)):
                custos_data.append([
                    nome,
                    f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                    f"Custo de {nome.lower()} para este voo"
                ])
    
    # Linha de total
    if 'Custo Total Amaro' in dados:
        custos_data.append(['', '', ''])  # Linha vazia
        custos_data.append([
            'TOTAL AMARO AVIATION',
            f"R$ {dados['Custo Total Amaro']:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
            'Custo total da opera√ß√£o'
        ])
    
    tabela_custos = Table(custos_data, colWidths=[50*mm, 35*mm, 70*mm])
    tabela_custos.setStyle(TableStyle([
        # Cabe√ßalho
        ('BACKGROUND', (0, 0), (-1, 0), AMARO_PRIMARY),
        ('TEXTCOLOR', (0, 0), (-1, 0), white),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
        
        # Dados
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),  # Valores alinhados √† direita
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        
        # Total
        ('BACKGROUND', (0, -1), (-1, -1), AMARO_LIGHT),
        ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
        ('TEXTCOLOR', (0, -1), (0, -1), AMARO_PRIMARY),
        
        # Bordas
        ('GRID', (0, 0), (-1, -1), 1, AMARO_DARK),
        ('LINEBELOW', (0, 0), (-1, 0), 2, AMARO_PRIMARY),
        
        # Padding
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('LEFTPADDING', (0, 0), (-1, -1), 10),
        ('RIGHTPADDING', (0, 0), (-1, -1), 10),
    ]))
    
    elementos.append(tabela_custos)
    elementos.append(Spacer(1, 8*mm))
    
    return elementos

def criar_secao_comparativo(dados):
    """Cria se√ß√£o de comparativo com mercado"""
    elementos = []
    styles = criar_estilos()
    
    elementos.append(Paragraph("COMPARATIVO COM MERCADO", styles['SubtituloAmaro']))
    
    # Dados do comparativo
    comparativo_data = [
        ['M√âTRICA', 'AMARO AVIATION', 'MERCADO', 'DIFEREN√áA'],
    ]
    
    custo_amaro = dados.get('Custo Total Amaro', 0)
    preco_mercado = dados.get('Pre√ßo Mercado', 0)
    economia = dados.get('Economia', 0)
    
    comparativo_data.append([
        'Custo Total',
        f"R$ {custo_amaro:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
        f"R$ {preco_mercado:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
        f"R$ {economia:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    ])
    
    # Percentual de economia
    if preco_mercado > 0:
        percentual = (economia / preco_mercado) * 100
        comparativo_data.append([
            'Percentual de Economia',
            '-',
            '-',
            f"{percentual:.1f}%"
        ])
    
    tabela_comparativo = Table(comparativo_data, colWidths=[45*mm, 35*mm, 35*mm, 35*mm])
    tabela_comparativo.setStyle(TableStyle([
        # Cabe√ßalho
        ('BACKGROUND', (0, 0), (-1, 0), AMARO_SECONDARY),
        ('TEXTCOLOR', (0, 0), (-1, 0), white),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 11),
        ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
        
        # Dados
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        
        # Destaque da economia
        ('TEXTCOLOR', (3, 1), (3, -1), AMARO_PRIMARY),
        ('FONTNAME', (3, 1), (3, -1), 'Helvetica-Bold'),
        
        # Bordas e padding
        ('GRID', (0, 0), (-1, -1), 1, AMARO_DARK),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('LEFTPADDING', (0, 0), (-1, -1), 8),
        ('RIGHTPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    elementos.append(tabela_comparativo)
    elementos.append(Spacer(1, 8*mm))
    
    return elementos

def criar_secao_conclusoes(dados):
    """Cria se√ß√£o de conclus√µes e insights"""
    elementos = []
    styles = criar_estilos()
    
    elementos.append(Paragraph("CONCLUS√ïES E INSIGHTS", styles['SubtituloAmaro']))
    
    economia = dados.get('Economia', 0)
    
    if economia > 0:
        texto_conclusao = f"""
        <b>‚úÖ RESULTADO POSITIVO:</b> A opera√ß√£o com Amaro Aviation apresenta economia significativa 
        de R$ {economia:,.2f} em rela√ß√£o ao pre√ßo de mercado para esta rota.
        <br/><br/>
        <b>üí° RECOMENDA√á√ïES:</b>
        <br/>‚Ä¢ Esta rota demonstra excelente viabilidade econ√¥mica
        <br/>‚Ä¢ Considere aumentar a frequ√™ncia nesta rota
        <br/>‚Ä¢ Utilize estes dados em apresenta√ß√µes comerciais
        """
    else:
        texto_conclusao = f"""
        <b>‚ö†Ô∏è ATEN√á√ÉO:</b> O custo da opera√ß√£o est√° R$ {abs(economia):,.2f} acima do pre√ßo de mercado.
        <br/><br/>
        <b>üîß RECOMENDA√á√ïES:</b>
        <br/>‚Ä¢ Revisar par√¢metros operacionais
        <br/>‚Ä¢ Analisar efici√™ncia de combust√≠vel
        <br/>‚Ä¢ Considerar otimiza√ß√£o de rotas
        """
    
    conclusao = Paragraph(texto_conclusao.replace(",", "X").replace(".", ",").replace("X", "."), 
                         styles['NormalAmaro'])
    elementos.append(conclusao)
    elementos.append(Spacer(1, 10*mm))
    
    return elementos

def criar_rodape():
    """Cria rodap√© do documento"""
    elementos = []
    styles = criar_estilos()
    
    # Linha decorativa
    linha = HRFlowable(width="100%", thickness=1, color=AMARO_PRIMARY)
    elementos.append(linha)
    elementos.append(Spacer(1, 3*mm))
    
    # Texto do rodap√©
    rodape_texto = """
    Este relat√≥rio foi gerado automaticamente pela Calculadora Amaro Aviation.<br/>
    Para mais informa√ß√µes, entre em contato com nossa equipe t√©cnica.<br/>
    <b>Amaro Aviation</b> - Excel√™ncia em Avia√ß√£o Executiva
    """
    
    rodape = Paragraph(rodape_texto, styles['FooterAmaro'])
    elementos.append(rodape)
    
    return elementos

def gerar_pdf(buffer_arquivo, dados: dict):
    """
    Gera PDF premium com identidade visual Amaro Aviation
    
    Args:
        buffer_arquivo: Buffer para salvar o PDF (BytesIO ou caminho do arquivo)
        dados: Dicion√°rio com os dados para o relat√≥rio
    """
    try:
        # Configurar documento
        if isinstance(buffer_arquivo, (str, Path)):
            doc = SimpleDocTemplate(
                str(buffer_arquivo),
                pagesize=A4,
                rightMargin=20*mm,
                leftMargin=20*mm,
                topMargin=25*mm,
                bottomMargin=25*mm
            )
        else:
            doc = SimpleDocTemplate(
                buffer_arquivo,
                pagesize=A4,
                rightMargin=20*mm,
                leftMargin=20*mm,
                topMargin=25*mm,
                bottomMargin=25*mm
            )
        
        # Construir elementos do PDF
        elementos = []
        
        # Cabe√ßalho
        elementos.extend(criar_cabecalho())
        
        # Informa√ß√µes gerais
        elementos.extend(criar_secao_informacoes(dados))
        
        # Breakdown de custos
        elementos.extend(criar_secao_custos(dados))
        
        # Comparativo
        elementos.extend(criar_secao_comparativo(dados))
        
        # Conclus√µes
        elementos.extend(criar_secao_conclusoes(dados))
        
        # Rodap√©
        elementos.extend(criar_rodape())
        
        # Gerar PDF
        doc.build(elementos)
        
        return True
        
    except Exception as e:
        print(f"Erro ao gerar PDF: {e}")
        return False