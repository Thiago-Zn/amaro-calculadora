import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from pathlib import Path
from utils.params import load_params
from utils.calculations import calcula_custo_trecho
from utils.charts import grafico_composicao, grafico_comparativo
from utils.exportador_excel import gerar_excel
from utils.exportador_pdf import gerar_pdf
from io import BytesIO

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Custo por Trecho - Amaro Aviation", 
    layout="wide",
    page_icon="‚úàÔ∏è"
)

# CSS Premium espec√≠fico para esta p√°gina
st.markdown("""
<style>
.metric-premium {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    border-radius: 15px;
    padding: 1.5rem;
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    border-left: 5px solid #8c1d40;
    margin: 1rem 0;
}

.calculation-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    border: 1px solid #e9ecef;
    margin: 1rem 0;
}

.result-highlight {
    background: linear-gradient(135deg, #8c1d40 0%, #a02050 100%);
    color: white;
    padding: 1.5rem;
    border-radius: 12px;
    text-align: center;
    margin: 1rem 0;
}

.export-section {
    background: #f8f9fa;
    border-radius: 10px;
    padding: 1rem;
    margin: 1rem 0;
}
</style>
""", unsafe_allow_html=True)

# Header da p√°gina
st.markdown("""
<div class="result-highlight">
    <h1 style="margin: 0;">‚úàÔ∏è An√°lise de Custo por Trecho</h1>
    <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">C√°lculo detalhado para rotas espec√≠ficas</p>
</div>
""", unsafe_allow_html=True)

# Carregamento de dados com tratamento de erro
try:
    params = load_params()
    modelos = params.get('modelos_disponiveis', [])
    
    # Carregamento de rotas com fallback
    rotas_file = Path("data/rotas.csv")
    if rotas_file.exists():
        rotas_df = pd.read_csv(rotas_file)
    else:
        # Rotas padr√£o se arquivo n√£o existir
        rotas_df = pd.DataFrame([
            {"origem": "GRU", "destino": "SDU", "duracao_h": 1.0},
            {"origem": "GRU", "destino": "CGH", "duracao_h": 0.5},
            {"origem": "CGH", "destino": "BSB", "duracao_h": 1.4},
            {"origem": "BSB", "destino": "SDU", "duracao_h": 1.7}
        ])
        st.info("üìã Usando rotas padr√£o. Adicione 'data/rotas.csv' para rotas personalizadas.")

except Exception as e:
    st.error(f"‚ùå Erro ao carregar dados: {e}")
    st.stop()

# Interface de entrada elegante
st.markdown("## üéØ Configura√ß√£o do Voo")

col1, col2 = st.columns(2)

with col1:
    st.markdown("""
    <div class="calculation-card">
        <h4>üõ©Ô∏è Sele√ß√£o da Aeronave</h4>
    """, unsafe_allow_html=True)
    
    modelo = st.selectbox(
        "Modelo da Aeronave",
        modelos,
        help="Selecione o modelo para an√°lise de custos"
    )
    
    # Informa√ß√µes do modelo selecionado
    if modelo in params['consumo_modelos']:
        consumo = params['consumo_modelos'][modelo]
        tipo_aeronave = "Jato" if params['preco_mercado_hora'][modelo] > 10000 else "Turboprop"
        
        st.info(f"""
        **{modelo}**
        - Tipo: {tipo_aeronave}
        - Consumo: {consumo} L/h
        - Pre√ßo mercado: R$ {params['preco_mercado_hora'][modelo]:,.0f}/h
        """)
    
    st.markdown("</div>", unsafe_allow_html=True)

with col2:
    st.markdown("""
    <div class="calculation-card">
        <h4>üó∫Ô∏è Defini√ß√£o da Rota</h4>
    """, unsafe_allow_html=True)
    
    # Sele√ß√£o de rota
    rota_opcoes = [f"{row['origem']} ‚Üí {row['destino']} ({row['duracao_h']}h)" 
                   for _, row in rotas_df.iterrows()]
    
    rota_selecionada = st.selectbox(
        "Rota Pr√©-definida",
        rota_opcoes,
        help="Selecione uma rota ou configure manualmente abaixo"
    )
    
    # Op√ß√£o manual
    usar_manual = st.checkbox("‚úèÔ∏è Configura√ß√£o Manual", help="Ative para inserir rota personalizada")
    
    if usar_manual:
        col_orig, col_dest, col_dur = st.columns(3)
        with col_orig:
            origem = st.text_input("Origem", value="GRU", placeholder="Ex: GRU")
        with col_dest:
            destino = st.text_input("Destino", value="SDU", placeholder="Ex: SDU")
        with col_dur:
            duracao = st.number_input("Dura√ß√£o (h)", min_value=0.1, max_value=20.0, 
                                    value=1.0, step=0.1, help="Dura√ß√£o do voo em horas")
    else:
        # Extrair dados da rota selecionada
        idx = rota_opcoes.index(rota_selecionada)
        row = rotas_df.iloc[idx]
        origem, destino, duracao = row['origem'], row['destino'], row['duracao_h']
        
        st.write(f"**Origem:** {origem}")
        st.write(f"**Destino:** {destino}")
        st.write(f"**Dura√ß√£o:** {duracao}h")
    
    st.markdown("</div>", unsafe_allow_html=True)

# Bot√£o de c√°lculo premium
st.markdown("---")
if st.button("üöÄ Calcular Custos", type="primary", use_container_width=True):
    try:
        # Realizar c√°lculos
        resultado = calcula_custo_trecho(modelo, duracao, params)
        
        # Exibi√ß√£o dos resultados principais
        st.markdown("## üí∞ Resultados da An√°lise")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üí∏ Custo Total",
                f"R$ {resultado['total']:,.2f}",
                help="Custo total da opera√ß√£o Amaro Aviation"
            )
        
        with col2:
            st.metric(
                "üè™ Pre√ßo Mercado",
                f"R$ {resultado['preco_mercado']:,.2f}",
                help="Pre√ßo cobrado no mercado para esta rota"
            )
        
        with col3:
            st.metric(
                "üíé Economia",
                f"R$ {resultado['economia']:,.2f}",
                delta=f"{resultado['percentual_economia']:.1f}%",
                help="Economia comparado ao mercado"
            )
        
        with col4:
            margem = (resultado['economia'] / resultado['preco_mercado'] * 100) if resultado['preco_mercado'] > 0 else 0
            st.metric(
                "üìä Margem",
                f"{margem:.1f}%",
                help="Margem de economia percentual"
            )
        
        # Breakdown detalhado dos custos
        st.markdown("---")
        st.markdown("## üìã Breakdown de Custos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de composi√ß√£o
            fig_composicao = grafico_composicao({
                "Combust√≠vel": resultado['preco_comb'],
                "Piloto": resultado['piloto'],
                "Manuten√ß√£o": resultado['manut'],
                "Deprecia√ß√£o": resultado['depr']
            })
            fig_composicao.update_layout(
                title="ü•ß Composi√ß√£o dos Custos",
                height=400
            )
            st.plotly_chart(fig_composicao, use_container_width=True)
        
        with col2:
            # Gr√°fico comparativo
            fig_comparativo = grafico_comparativo(resultado['total'], resultado['preco_mercado'])
            fig_comparativo.update_layout(
                title="‚öñÔ∏è Amaro vs. Mercado",
                height=400
            )
            st.plotly_chart(fig_comparativo, use_container_width=True)
        
        # Tabela detalhada
        st.markdown("### üìä Detalhamento Completo")
        
        detalhes_df = pd.DataFrame([
            {"Componente": "üõ¢Ô∏è Combust√≠vel", "Valor": resultado['preco_comb'], "Descri√ß√£o": f"{params['consumo_modelos'][modelo]} L/h √ó R$ {params['preco_combustivel']:.2f}/L"},
            {"Componente": "üë®‚Äç‚úàÔ∏è Piloto", "Valor": resultado['piloto'], "Descri√ß√£o": f"R$ {params['custo_piloto_hora_modelo'][modelo]:,.0f}/h √ó {duracao}h"},
            {"Componente": "üîß Manuten√ß√£o", "Valor": resultado['manut'], "Descri√ß√£o": f"R$ {params['custo_manutencao'][modelo]:,.0f}/h √ó {duracao}h"},
            {"Componente": "üìâ Deprecia√ß√£o", "Valor": resultado['depr'], "Descri√ß√£o": f"R$ {params['depreciacao_hora'][modelo]:,.0f}/h √ó {duracao}h"},
            {"Componente": "üí∞ **TOTAL AMARO**", "Valor": resultado['total'], "Descri√ß√£o": "Soma de todos os custos"},
            {"Componente": "üè™ **PRE√áO MERCADO**", "Valor": resultado['preco_mercado'], "Descri√ß√£o": f"R$ {params['preco_mercado_hora'][modelo]:,.0f}/h √ó {duracao}h"},
            {"Componente": "üíé **ECONOMIA**", "Valor": resultado['economia'], "Descri√ß√£o": f"Economia de {resultado['percentual_economia']:.1f}%"}
        ])
        
        st.dataframe(
            detalhes_df.style.format({"Valor": "R$ {:,.2f}"}).apply(
                lambda x: ['font-weight: bold' if '**' in str(x.name) else '' for i in x], axis=1
            ),
            use_container_width=True,
            hide_index=True
        )
        
        # Se√ß√£o de exporta√ß√£o premium
        st.markdown("---")
        st.markdown("""
        <div class="export-section">
            <h3>üì§ Exportar Relat√≥rios</h3>
            <p>Baixe os resultados em formatos profissionais para apresenta√ß√µes e arquivo.</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        # Preparar dados para exporta√ß√£o
        dados_exportacao = {
            "An√°lise": "Custo por Trecho",
            "Modelo": modelo,
            "Rota": f"{origem} ‚Üí {destino}",
            "Dura√ß√£o": f"{duracao} horas",
            "Combust√≠vel": resultado['preco_comb'],
            "Piloto": resultado['piloto'],
            "Manuten√ß√£o": resultado['manut'],
            "Deprecia√ß√£o": resultado['depr'],
            "Custo Total Amaro": resultado['total'],
            "Pre√ßo Mercado": resultado['preco_mercado'],
            "Economia": resultado['economia'],
            "Percentual Economia": f"{resultado['percentual_economia']:.1f}%"
        }
        
        with col1:
            # Exporta√ß√£o Excel
            try:
                excel_buffer = BytesIO()
                gerar_excel(excel_buffer, dados_exportacao)
                excel_buffer.seek(0)
                
                st.download_button(
                    "üìä Baixar Relat√≥rio Excel",
                    data=excel_buffer.getvalue(),
                    file_name=f"amaro_custo_trecho_{origem}_{destino}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
            except Exception as e:
                st.error(f"Erro ao gerar Excel: {e}")
        
        with col2:
            # Exporta√ß√£o PDF
            try:
                pdf_buffer = BytesIO()
                gerar_pdf(pdf_buffer, dados_exportacao)
                pdf_buffer.seek(0)
                
                st.download_button(
                    "üìÑ Baixar Relat√≥rio PDF",
                    data=pdf_buffer.getvalue(),
                    file_name=f"amaro_custo_trecho_{origem}_{destino}.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )
            except Exception as e:
                st.error(f"Erro ao gerar PDF: {e}")
        
        # Insights e recomenda√ß√µes
        st.markdown("---")
        st.markdown("## üí° Insights & Recomenda√ß√µes")
        
        if resultado['economia'] > 0:
            economia_anual = resultado['economia'] * 200  # Estimativa 200 voos/ano
            st.success(f"""
            ‚úÖ **Economia Significativa Identificada**
            - Economia por voo: R$ {resultado['economia']:,.2f}
            - Potencial economia anual (200 voos): R$ {economia_anual:,.2f}
            - Percentual de economia: {resultado['percentual_economia']:.1f}%
            """)
        else:
            st.warning(f"""
            ‚ö†Ô∏è **Aten√ß√£o: Custo Acima do Mercado**
            - Diferen√ßa: R$ {abs(resultado['economia']):,.2f}
            - Recomenda-se revisar par√¢metros operacionais
            """)
            
    except Exception as e:
        st.error(f"‚ùå Erro no c√°lculo: {e}")
        st.info("üîß Verifique os par√¢metros e dados de entrada.")

# Informa√ß√µes adicionais na sidebar
with st.sidebar:
    st.markdown("""
    ### üìò Como Usar
    
    1. **Selecione o modelo** da aeronave
    2. **Escolha a rota** ou configure manualmente
    3. **Clique em Calcular** para ver resultados
    4. **Exporte relat√≥rios** em Excel ou PDF
    
    ### üéØ Funcionalidades
    - C√°lculo detalhado por componente
    - Compara√ß√£o com pre√ßos de mercado
    - Gr√°ficos interativos
    - Exporta√ß√£o profissional
    - Insights autom√°ticos
    """)
    
    if 'resultado' in locals():
        st.markdown(f"""
        ### üìä Resumo R√°pido
        - **Economia:** R$ {resultado['economia']:,.0f}
        - **Margem:** {resultado['percentual_economia']:.1f}%
        - **Efici√™ncia:** {"üü¢ Excelente" if resultado['percentual_economia'] > 20 else "üü° Boa" if resultado['percentual_economia'] > 10 else "üî¥ Revisar"}
        """)