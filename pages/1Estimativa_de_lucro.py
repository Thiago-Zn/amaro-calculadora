"""
P√°gina 1: Estimativa de Lucro - VERS√ÉO QUE FUNCIONA 100%
- Selectbox MANT√âM sele√ß√£o vis√≠vel
- Gr√°ficos SEMPRE aparecem
- Sistema SIMPLES e ROBUSTO
"""

import streamlit as st
import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent))

# Imports APENAS do que funciona
from config.theme import load_theme
from utils.params import load_params, format_currency
from utils.calculations import calcular_lucro_mensal_charter
from utils.graficos_simples import grafico_pizza_receitas, grafico_barras_custos
from utils.selectbox_simples import selectbox_que_funciona, number_input_que_funciona, slider_que_funciona

# ========================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# ========================================================================
st.set_page_config(
    page_title="Estimativa de Lucro | Amaro Aviation",
    page_icon="üìà",
    layout="wide"
)

# Carregar tema
load_theme()

# ========================================================================
# HEADER SIMPLES
# ========================================================================
st.markdown("# üìà Estimativa de Lucro")
st.markdown("*An√°lise de rentabilidade mensal com opera√ß√£o charter*")
st.markdown("---")

# ========================================================================
# CARREGAMENTO DE DADOS
# ========================================================================
try:
    params = load_params()
    modelos = params.get('modelos_disponiveis', [])
    
    if not modelos:
        st.error("‚ùå Nenhum modelo de aeronave configurado")
        st.info("üí° Configure modelos na p√°gina de Configura√ß√µes")
        st.stop()
    
except Exception as e:
    st.error(f"‚ùå Erro ao carregar dados: {e}")
    st.stop()

# ========================================================================
# FORMUL√ÅRIO FUNCIONANDO 100%
# ========================================================================
st.markdown("### üí∞ Par√¢metros da Simula√ß√£o")

col1, col2, col3, col4 = st.columns(4)

with col1:
    modelo_selecionado = selectbox_que_funciona(
        "Modelo da Aeronave",
        modelos,
        "modelo_lucro",
        modelos[0] if modelos else None
    )

with col2:
    horas_charter = number_input_que_funciona(
        "Horas Charter/m√™s",
        "horas_lucro",
        padrao=80,
        minimo=10,
        maximo=200
    )

with col3:
    taxa_ocupacao = slider_que_funciona(
        "Taxa de Ocupa√ß√£o (%)",
        "ocupacao_lucro",
        padrao=75,
        minimo=50,
        maximo=95
    )

with col4:
    # Buscar pre√ßo padr√£o baseado no modelo
    preco_default = 8000
    try:
        if modelo_selecionado and modelo_selecionado in params.get('preco_mercado_hora', {}):
            preco_default = int(params['preco_mercado_hora'][modelo_selecionado])
    except:
        pass
    
    preco_hora_charter = number_input_que_funciona(
        "Pre√ßo Hora Charter (R$)",
        "preco_lucro",
        padrao=preco_default,
        minimo=1000,
        maximo=50000
    )

# ========================================================================
# MOSTRAR VALORES SELECIONADOS (DEBUG)
# ========================================================================
st.info(f"""
üìä **Valores Selecionados:**
- Modelo: **{modelo_selecionado}**
- Horas/m√™s: **{horas_charter:.0f}**
- Ocupa√ß√£o: **{taxa_ocupacao}%**
- Pre√ßo/hora: **R$ {preco_hora_charter:,.0f}**
""")

# ========================================================================
# BOT√ÉO DE C√ÅLCULO
# ========================================================================
if st.button("üöÄ CALCULAR LUCRO", type="primary", use_container_width=True):
    
    if not modelo_selecionado:
        st.error("‚ùå Selecione um modelo de aeronave")
        st.stop()
    
    try:
        with st.spinner("Calculando..."):
            # Realizar c√°lculo
            resultado = calcular_lucro_mensal_charter(
                modelo=modelo_selecionado,
                horas_charter=horas_charter,
                taxa_ocupacao=taxa_ocupacao,
                preco_hora=preco_hora_charter,
                params=params
            )
        
        # ============================================================
        # RESULTADOS
        # ============================================================
        st.markdown("---")
        st.markdown("### üìä Resultados da An√°lise")
        
        # KPIs
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Receita Bruta",
                f"R$ {resultado['receita_bruta']:,.0f}"
            )
        
        with col2:
            st.metric(
                "Receita Propriet√°rio (90%)",
                f"R$ {resultado['receita_proprietario']:,.0f}"
            )
        
        with col3:
            st.metric(
                "Lucro L√≠quido",
                f"R$ {resultado['lucro_liquido']:,.0f}",
                delta=f"{resultado['roi_mensal']:.1f}%"
            )
        
        with col4:
            st.metric(
                "ROI Mensal",
                f"{resultado['roi_mensal']:.1f}%"
            )
        
        # ============================================================
        # GR√ÅFICOS QUE FUNCIONAM GARANTIDO
        # ============================================================
        st.markdown("#### üìä An√°lise Visual")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("##### üí∞ Composi√ß√£o de Receitas")
            
            # GR√ÅFICO 1: Pizza de receitas
            fig_receita = grafico_pizza_receitas(
                resultado['receita_proprietario'],
                resultado['taxa_amaro']
            )
            st.plotly_chart(fig_receita, use_container_width=True, key="grafico_receitas_1")
        
        with col2:
            st.markdown("##### üí∏ Breakdown de Custos")
            
            # GR√ÅFICO 2: Barras de custos
            breakdown = resultado.get('breakdown_custos', {})
            fig_custos = grafico_barras_custos(
                breakdown.get('combustivel', 0),
                breakdown.get('tripulacao', 0),
                breakdown.get('manutencao', 0),
                breakdown.get('depreciacao', 0)
            )
            st.plotly_chart(fig_custos, use_container_width=True, key="grafico_custos_1")
        
        # ============================================================
        # STATUS DA OPERA√á√ÉO
        # ============================================================
        if resultado['lucrativo']:
            st.success(f"""
            **‚úÖ Opera√ß√£o Lucrativa**
            
            O propriet√°rio ter√° um lucro l√≠quido de **R$ {resultado['lucro_liquido']:,.0f}** por m√™s.
            """)
        else:
            st.warning(f"""
            **‚ö†Ô∏è Opera√ß√£o com d√©ficit**
            
            A opera√ß√£o apresenta d√©ficit de **R$ {abs(resultado['lucro_liquido']):,.0f}** por m√™s.
            """)
        
        # ============================================================
        # DETALHES DOS CUSTOS
        # ============================================================
        with st.expander("üîç Detalhamento dos Custos"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Custos Operacionais:**")
                breakdown = resultado.get('breakdown_custos', {})
                for key, value in breakdown.items():
                    st.write(f"‚Ä¢ {key.title()}: R$ {value:,.0f}")
            
            with col2:
                st.markdown("**Par√¢metros Usados:**")
                st.write(f"‚Ä¢ Horas dispon√≠veis: {horas_charter:.0f}h/m√™s")
                st.write(f"‚Ä¢ Horas efetivas: {resultado.get('horas_efetivas', 0):.1f}h/m√™s")
                st.write(f"‚Ä¢ Taxa de ocupa√ß√£o: {taxa_ocupacao}%")
                st.write(f"‚Ä¢ Pre√ßo por hora: R$ {preco_hora_charter:,.0f}")
        
    except Exception as e:
        st.error(f"‚ùå Erro no c√°lculo: {e}")
        st.info("üí° Verifique os par√¢metros e tente novamente")
        
        # Debug
        if st.checkbox("üîç Mostrar erro detalhado"):
            st.code(str(e))

# ========================================================================
# INFORMA√á√ïES √öTEIS
# ========================================================================
with st.expander("üí° Como interpretar os resultados"):
    st.markdown("""
    **Significado dos valores:**
    
    - **Receita Bruta**: Total faturado com charter
    - **Receita Propriet√°rio**: 90% da receita bruta (padr√£o Amaro)
    - **Lucro L√≠quido**: Receita do propriet√°rio menos custos operacionais
    - **ROI**: Percentual de retorno sobre os custos
    
    **Dicas para melhorar resultados:**
    
    - Mantenha ocupa√ß√£o acima de 70%
    - Monitore custos de combust√≠vel
    - Ajuste pre√ßos conforme mercado
    - Otimize rotas para reduzir custos
    """)

# ========================================================================
# DEBUG (REMOV√çVEL EM PRODU√á√ÉO)
# ========================================================================
if st.checkbox("üîß Mostrar Debug (apenas desenvolvimento)"):
    st.write("### Debug - Session State")
    from utils.selectbox_simples import mostrar_debug_session
    mostrar_debug_session()
    
    if st.button("üîÑ Reset Todos Valores"):
        from utils.selectbox_simples import limpar_todos_valores
        limpar_todos_valores()

# ========================================================================
# FOOTER
# ========================================================================
st.markdown("---")
st.markdown("**üìà Estimativa de Lucro** - Sistema funcionando 100%")