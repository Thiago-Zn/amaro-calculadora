"""
Sistema de idiomas simplificado para Amaro Aviation Calculator v3.0
Suporte para Portugu√™s e Ingl√™s com fallbacks autom√°ticos
"""

def get_translations():
    """Tradu√ß√µes centralizadas do sistema"""
    return {
        'pt': {
            # Interface Principal
            'app_title': 'Amaro Aviation',
            'app_subtitle': 'Calculadora Inteligente de Custos Operacionais',
            'language': 'Idioma',
            
            # Abas
            'tab_profit': 'üìà Estimativa de Lucro Mensal',
            'tab_comparison': '‚öñÔ∏è Comparativo de Custos',
            'tab_settings': '‚öôÔ∏è Configura√ß√µes e F√≥rmulas',
            
            # Campos
            'aircraft_model': 'Modelo da Aeronave',
            'monthly_hours': 'Horas de Voo por M√™s',
            'occupancy_rate': 'Taxa de Ocupa√ß√£o (%)',
            'annual_hours': 'Horas de Voo por Ano',
            'fixed_costs': 'Custos Fixos Anuais (R$)',
            'include_charter': 'Incluir Receita de Charter',
            'calculate': 'üöÄ Calcular',
            
            # Resultados
            'gross_revenue': 'Receita Bruta',
            'owner_revenue': 'Receita do Propriet√°rio (90%)',
            'amaro_fee': 'Taxa Amaro (10%)',
            'operational_costs': 'Custos Operacionais',
            'net_profit': 'Lucro L√≠quido',
            'monthly_roi': 'ROI Mensal',
            'own_management': 'Gest√£o Pr√≥pria',
            'amaro_management': 'Gest√£o Amaro Aviation',
            'annual_savings': 'Economia Anual',
            'savings_percentage': 'Percentual de Economia',
            
            # Configura√ß√µes
            'fuel_price': 'Pre√ßo do Combust√≠vel (R$/L)',
            'pilot_cost': 'Custo Piloto (R$/h)',
            'depreciation': 'Deprecia√ß√£o Anual (%)',
            'maintenance_turboprop': 'Manuten√ß√£o Turboprop (R$/h)',
            'maintenance_jet': 'Manuten√ß√£o Jato (R$/h)',
            'market_price_turboprop': 'Pre√ßo Mercado Turboprop (R$/h)',
            'market_price_jet': 'Pre√ßo Mercado Jato (R$/h)',
            'save_settings': 'üíæ Salvar Configura√ß√µes',
            
            # Status
            'system_operational': 'Sistema Operacional',
            'models_configured': 'modelos configurados',
            'profitable_operation': 'Opera√ß√£o Rent√°vel',
            'operation_at_loss': 'Aten√ß√£o: Opera√ß√£o no Preju√≠zo',
            'settings_saved': 'Configura√ß√µes salvas com sucesso!',
            'calculation_error': 'Erro no c√°lculo',
            
            # Exporta√ß√£o
            'export_excel': 'üìä Baixar Excel',
            'export_pdf': 'üìÑ Baixar PDF',
            'developed_with_love': 'Desenvolvido com ‚ù§Ô∏è para excel√™ncia comercial'
        },
        'en': {
            # Main Interface
            'app_title': 'Amaro Aviation',
            'app_subtitle': 'Smart Operating Cost Calculator',
            'language': 'Language',
            
            # Tabs
            'tab_profit': 'üìà Monthly Profit Estimation',
            'tab_comparison': '‚öñÔ∏è Cost Comparison',
            'tab_settings': '‚öôÔ∏è Settings & Formulas',
            
            # Fields
            'aircraft_model': 'Aircraft Model',
            'monthly_hours': 'Flight Hours per Month',
            'occupancy_rate': 'Occupancy Rate (%)',
            'annual_hours': 'Annual Flight Hours',
            'fixed_costs': 'Annual Fixed Costs (R$)',
            'include_charter': 'Include Charter Revenue',
            'calculate': 'üöÄ Calculate',
            
            # Results
            'gross_revenue': 'Gross Revenue',
            'owner_revenue': 'Owner Revenue (90%)',
            'amaro_fee': 'Amaro Fee (10%)',
            'operational_costs': 'Operational Costs',
            'net_profit': 'Net Profit',
            'monthly_roi': 'Monthly ROI',
            'own_management': 'Own Management',
            'amaro_management': 'Amaro Aviation Management',
            'annual_savings': 'Annual Savings',
            'savings_percentage': 'Savings Percentage',
            
            # Settings  
            'fuel_price': 'Fuel Price (R$/L)',
            'pilot_cost': 'Pilot Cost (R$/h)',
            'depreciation': 'Annual Depreciation (%)',
            'maintenance_turboprop': 'Turboprop Maintenance (R$/h)',
            'maintenance_jet': 'Jet Maintenance (R$/h)',
            'market_price_turboprop': 'Turboprop Market Price (R$/h)',
            'market_price_jet': 'Jet Market Price (R$/h)',
            'save_settings': 'üíæ Save Settings',
            
            # Status
            'system_operational': 'System Operational',
            'models_configured': 'models configured',
            'profitable_operation': 'Profitable Operation',
            'operation_at_loss': 'Warning: Operation at Loss',
            'settings_saved': 'Settings saved successfully!',
            'calculation_error': 'Calculation error',
            
            # Export
            'export_excel': 'üìä Download Excel',
            'export_pdf': 'üìÑ Download PDF', 
            'developed_with_love': 'Developed with ‚ù§Ô∏è for commercial excellence'
        }
    }

def get_text(key, lang='pt'):
    """
    Obt√©m texto traduzido com fallback autom√°tico
    
    Args:
        key: Chave da tradu√ß√£o
        lang: C√≥digo do idioma ('pt' ou 'en')
    
    Returns:
        String traduzida ou a pr√≥pria chave se n√£o encontrada
    """
    try:
        translations = get_translations()
        return translations.get(lang, translations['pt']).get(key, key)
    except Exception:
        return key

def detect_language(selection):
    """
    Detecta idioma a partir da sele√ß√£o do usu√°rio
    
    Args:
        selection: String selecionada ("üáßüá∑ Portugu√™s" ou "üá∫üá∏ English")
    
    Returns:
        String: 'pt' ou 'en'
    """
    return 'pt' if 'üáßüá∑' in selection else 'en'

def format_currency(value, lang='pt'):
    """
    Formata valores monet√°rios de acordo com o idioma
    
    Args:
        value: Valor num√©rico
        lang: Idioma ('pt' ou 'en')
    
    Returns:
        String formatada
    """
    try:
        if lang == 'pt':
            # Formato brasileiro: R$ 1.234.567,89
            return f"R$ {value:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        else:
            # Formato americano: R$ 1,234,567.89
            return f"R$ {value:,.2f}"
    except Exception:
        return str(value)

def format_percentage(value, lang='pt'):
    """
    Formata percentuais de acordo com o idioma
    
    Args:
        value: Valor percentual
        lang: Idioma ('pt' ou 'en')
    
    Returns:
        String formatada
    """
    try:
        if lang == 'pt':
            return f"{value:.1f}%".replace(".", ",")
        else:
            return f"{value:.1f}%"
    except Exception:
        return str(value)

def get_language_options():
    """Op√ß√µes de idioma para selectbox"""
    return ["üáßüá∑ Portugu√™s", "üá∫üá∏ English"]

# Classe de conveni√™ncia
class LanguageManager:
    """Gerenciador de idioma simplificado"""
    
    def __init__(self, default_lang='pt'):
        self.current_lang = default_lang
    
    def set_language(self, lang):
        """Define idioma atual"""
        if lang in ['pt', 'en']:
            self.current_lang = lang
    
    def t(self, key):
        """Traduz usando idioma atual"""
        return get_text(key, self.current_lang)
    
    def format_currency(self, value):
        """Formata moeda usando idioma atual"""
        return format_currency(value, self.current_lang)
    
    def format_percentage(self, value):
        """Formata percentual usando idioma atual"""
        return format_percentage(value, self.current_lang)

# Inst√¢ncia global
language_manager = LanguageManager()

# Fun√ß√µes de conveni√™ncia
def t(key, lang='pt'):
    """Fun√ß√£o de conveni√™ncia para tradu√ß√£o"""
    return get_text(key, lang)

if __name__ == "__main__":
    # Teste do sistema
    print("=== Teste Sistema de Idiomas ===")
    print(f"PT: {get_text('app_title', 'pt')}")
    print(f"EN: {get_text('app_title', 'en')}")
    print(f"Moeda PT: {format_currency(1234.56, 'pt')}")
    print(f"Moeda EN: {format_currency(1234.56, 'en')}")
    print("‚úÖ Sistema funcionando!")